// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  no_wa     String   @id @unique @db.VarChar(100)
  fullName  String   @db.VarChar(250)
  password  String   @db.VarChar(250)
  token     String?  @db.VarChar(250)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model activity {
  id         Int      @id @default(autoincrement())
  activityID String   @unique
  title      String   @db.VarChar(250)
  desc       String?  @db.VarChar(1000)
  images     Json?    @db.Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("activities")
}

model article {
  id        Int      @id @default(autoincrement())
  articleID String   @unique
  title     String   @db.VarChar(250)
  desc      String?  @db.VarChar(1000)
  images    Json?    @db.Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("articles")
}

model announcement {
  id             Int      @id @default(autoincrement())
  announcementID String   @unique
  title          String   @db.VarChar(250)
  desc           String?  @db.VarChar(1000)
  images         Json?    @db.Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("announcements")
}

model socmed {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(250)
  link      String   @db.VarChar(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("socmeds")
}

model profile {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(250)
  desc      String?  @db.VarChar(1000)
  images    Json?    @db.Json()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model loker {
  id               String             @id @unique
  name             String             @db.VarChar(250)
  desc             String?            @db.VarChar(1000)
  dateStart        String?            @db.VarChar(250)
  dateEnd          String?            @db.VarChar(250)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  applicationLoker applicationLoker[]

  @@map("lokers")
}

model magang {
  id                String              @id @unique
  name              String              @db.VarChar(250)
  desc              String?             @db.VarChar(1000)
  dateStart         String?             @db.VarChar(250)
  dateEnd           String?             @db.VarChar(250)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  applicationMagang applicationMagang[]

  @@map("magangs")
}

model applicationLoker {
  id           String   @id @unique
  nik          String   @db.VarChar(100)
  no_wa        String   @db.VarChar(100)
  email        String   @db.VarChar(100)
  fullName     String   @db.VarChar(250)
  tanggalLahir DateTime @db.Date
  loker        loker    @relation(fields: [lokerId], references: [id])
  lokerId      String
  sekolah      String   @db.VarChar(500)
  jurusan      String   @db.VarChar(500)
  jenjang      String   @db.VarChar(100)
  address      String   @db.VarChar(1000)
  fileResume   String?  @db.VarChar(500)
  fileApply    String?  @db.VarChar(500)
  fileOther    String?  @db.VarChar(500)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("applicationLokers")
}

model applicationMagang {
  id           String   @id @unique
  nik          String   @db.VarChar(100)
  no_wa        String   @db.VarChar(100)
  email        String   @db.VarChar(100)
  fullName     String   @db.VarChar(250)
  tanggalLahir DateTime @db.Date
  magang       magang   @relation(fields: [magangId], references: [id])
  magangId     String
  sekolah      String   @db.VarChar(500)
  jurusan      String   @db.VarChar(500)
  jenjang      String   @db.VarChar(100)
  address      String   @db.VarChar(1000)
  fileResume   String?  @db.VarChar(500)
  fileApply    String?  @db.VarChar(500)
  fileOther    String?  @db.VarChar(500)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("applicationMagangs")
}

model laporanTahunan {
  name               String               @id @unique
  desc               String?              @db.VarChar(1000)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  fileLaporanTahunan fileLaporanTahunan[]

  @@map("laporanTahunan")
}

model fileLaporanTahunan {
  id                 String         @id @unique @db.VarChar(250)
  tahun              Int            @db.Int
  laporanTahunan     laporanTahunan @relation(fields: [laporanTahunanName], references: [name])
  laporanTahunanName String
  file               String         @db.VarChar(1000)
  desc               String?        @db.VarChar(1000)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@map("fileLaporanTahunan")
}

model linkAplikasi {
  name      String   @id @unique @db.VarChar(100)
  link      String   @db.VarChar(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("linkAplikasi")
}

model dasarHukum {
  name      String   @id @unique @db.VarChar(100)
  file      String?  @db.VarChar(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dasarHukum")
}
